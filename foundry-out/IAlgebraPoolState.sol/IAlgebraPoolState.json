{"abi":[{"type":"function","name":"communityVault","inputs":[],"outputs":[{"name":"communityVaultAddress","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"fee","inputs":[],"outputs":[{"name":"currentFee","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"getCommunityFeePending","inputs":[],"outputs":[{"name":"communityFeePending0","type":"uint128","internalType":"uint128"},{"name":"communityFeePending1","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"getPluginFeePending","inputs":[],"outputs":[{"name":"pluginFeePending0","type":"uint128","internalType":"uint128"},{"name":"pluginFeePending1","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"getReserves","inputs":[],"outputs":[{"name":"reserve0","type":"uint128","internalType":"uint128"},{"name":"reserve1","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"globalState","inputs":[],"outputs":[{"name":"price","type":"uint160","internalType":"uint160"},{"name":"tick","type":"int24","internalType":"int24"},{"name":"lastFee","type":"uint16","internalType":"uint16"},{"name":"pluginConfig","type":"uint8","internalType":"uint8"},{"name":"communityFee","type":"uint16","internalType":"uint16"},{"name":"unlocked","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isUnlocked","inputs":[],"outputs":[{"name":"unlocked","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lastFeeTransferTimestamp","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"liquidity","inputs":[],"outputs":[{"name":"","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"nextTickGlobal","inputs":[],"outputs":[{"name":"","type":"int24","internalType":"int24"}],"stateMutability":"view"},{"type":"function","name":"plugin","inputs":[],"outputs":[{"name":"pluginAddress","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"positions","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"liquidity","type":"uint256","internalType":"uint256"},{"name":"innerFeeGrowth0Token","type":"uint256","internalType":"uint256"},{"name":"innerFeeGrowth1Token","type":"uint256","internalType":"uint256"},{"name":"fees0","type":"uint128","internalType":"uint128"},{"name":"fees1","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"prevTickGlobal","inputs":[],"outputs":[{"name":"","type":"int24","internalType":"int24"}],"stateMutability":"view"},{"type":"function","name":"safelyGetStateOfAMM","inputs":[],"outputs":[{"name":"sqrtPrice","type":"uint160","internalType":"uint160"},{"name":"tick","type":"int24","internalType":"int24"},{"name":"lastFee","type":"uint16","internalType":"uint16"},{"name":"pluginConfig","type":"uint8","internalType":"uint8"},{"name":"activeLiquidity","type":"uint128","internalType":"uint128"},{"name":"nextTick","type":"int24","internalType":"int24"},{"name":"previousTick","type":"int24","internalType":"int24"}],"stateMutability":"view"},{"type":"function","name":"tickSpacing","inputs":[],"outputs":[{"name":"","type":"int24","internalType":"int24"}],"stateMutability":"view"},{"type":"function","name":"tickTable","inputs":[{"name":"wordPosition","type":"int16","internalType":"int16"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"tickTreeRoot","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"tickTreeSecondLayer","inputs":[{"name":"","type":"int16","internalType":"int16"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ticks","inputs":[{"name":"tick","type":"int24","internalType":"int24"}],"outputs":[{"name":"liquidityTotal","type":"uint256","internalType":"uint256"},{"name":"liquidityDelta","type":"int128","internalType":"int128"},{"name":"prevTick","type":"int24","internalType":"int24"},{"name":"nextTick","type":"int24","internalType":"int24"},{"name":"outerFeeGrowth0Token","type":"uint256","internalType":"uint256"},{"name":"outerFeeGrowth1Token","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalFeeGrowth0Token","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalFeeGrowth1Token","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"communityVault()":"53e97868","fee()":"ddca3f43","getCommunityFeePending()":"7bd78025","getPluginFeePending()":"a1eded87","getReserves()":"0902f1ac","globalState()":"e76c01e4","isUnlocked()":"8380edb7","lastFeeTransferTimestamp()":"77f8c3a9","liquidity()":"1a686502","nextTickGlobal()":"d5c35a7e","plugin()":"ef01df4f","positions(bytes32)":"514ea4bf","prevTickGlobal()":"050a4d21","safelyGetStateOfAMM()":"97ce1c51","tickSpacing()":"d0c93a7c","tickTable(int16)":"c677e3e0","tickTreeRoot()":"578b9a36","tickTreeSecondLayer(int16)":"d8619037","ticks(int24)":"f30dba93","totalFeeGrowth0Token()":"6378ae44","totalFeeGrowth1Token()":"ecdecf42"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"communityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"communityVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"currentFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityFeePending\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"communityFeePending0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"communityFeePending1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPluginFeePending\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"pluginFeePending0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pluginFeePending1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reserve0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserve1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalState\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"lastFee\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pluginConfig\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"communityFee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeTransferTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTickGlobal\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plugin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth1Token\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fees0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fees1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevTickGlobal\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safelyGetStateOfAMM\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPrice\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"lastFee\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pluginConfig\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"activeLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"nextTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"previousTick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickTreeRoot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"name\":\"tickTreeSecondLayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTotal\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"liquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"int24\",\"name\":\"prevTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"nextTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth1Token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth0Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth1Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Important security note: when using this data by external contracts, it is necessary to take into account the possibility of manipulation (including read-only reentrancy). This interface is based on the UniswapV3 interface, credit to Uniswap Labs under GPL-2.0-or-later license: https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\",\"kind\":\"dev\",\"methods\":{\"communityVault()\":{\"returns\":{\"communityVaultAddress\":\"The communityVault address\"}},\"fee()\":{\"details\":\"In case dynamic fee is enabled in the pool, this method will call the plugin to get the current fee. If the plugin implements complex fee logic, this method may return an incorrect value or revert. In this case, see the plugin implementation and related documentation.**important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"returns\":{\"currentFee\":\"The current pool fee value in hundredths of a bip, i.e. 1e-6\"}},\"getCommunityFeePending()\":{\"details\":\"Will be sent FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp\",\"returns\":{\"communityFeePending0\":\"The amount of token0 that will be sent to the vault\",\"communityFeePending1\":\"The amount of token1 that will be sent to the vault\"}},\"getPluginFeePending()\":{\"details\":\"Will be sent FEE_TRANSFER_FREQUENCY after feeLastTransferTimestamp\",\"returns\":{\"pluginFeePending0\":\"The amount of token0 that will be sent to the plugin\",\"pluginFeePending1\":\"The amount of token1 that will be sent to the plugin\"}},\"getReserves()\":{\"details\":\"If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee. If the balance exceeds uint128, the excess will be sent to the communityVault.\",\"returns\":{\"reserve0\":\"The last known reserve of token0\",\"reserve1\":\"The last known reserve of token1\"}},\"globalState()\":{\"details\":\"**important security note: caller should check `unlocked` flag to prevent read-only reentrancy**\",\"returns\":{\"communityFee\":\"The community fee represented as a percent of all collected fee in thousandths, i.e. 1e-3 (so 100 is 10%)\",\"lastFee\":\"The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\",\"pluginConfig\":\"The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\",\"price\":\"The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\",\"tick\":\"The current tick of the pool, i.e. according to the last tick transition that was run This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\",\"unlocked\":\"Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\"}},\"isUnlocked()\":{\"details\":\"can be used to prevent read-only reentrancy. This method just returns `globalState.unlocked` value\",\"returns\":{\"unlocked\":\"Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\"}},\"lastFeeTransferTimestamp()\":{\"returns\":{\"_0\":\"The timestamp truncated to 32 bits\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks. Returned value cannot exceed type(uint128).max**important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"returns\":{\"_0\":\"The current in range liquidity\"}},\"nextTickGlobal()\":{\"details\":\"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"returns\":{\"_0\":\"The next initialized tick\"}},\"plugin()\":{\"details\":\"The plugin is subject to change\",\"returns\":{\"pluginAddress\":\"The address of currently used plugin\"}},\"positions(bytes32)\":{\"details\":\"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"params\":{\"key\":\"The position's key is a packed concatenation of the owner address, bottomTick and topTick indexes\"},\"returns\":{\"fees0\":\"The computed amount of token0 owed to the position as of the last mint/burn/poke\",\"fees1\":\"The computed amount of token1 owed to the position as of the last mint/burn/poke\",\"innerFeeGrowth0Token\":\"Fee growth of token0 inside the tick range as of the last mint/burn/poke\",\"innerFeeGrowth1Token\":\"Fee growth of token1 inside the tick range as of the last mint/burn/poke\",\"liquidity\":\"The amount of liquidity in the position\"}},\"prevTickGlobal()\":{\"details\":\"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"returns\":{\"_0\":\"The previous initialized tick\"}},\"safelyGetStateOfAMM()\":{\"details\":\"Several values exposed as a single method to save gas when accessed externally. **Important security note: this method checks reentrancy lock and should be preferred in most cases**.\",\"returns\":{\"activeLiquidity\":\" The currently in-range liquidity available to the pool\",\"lastFee\":\"The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\",\"nextTick\":\"The next initialized tick after current global tick\",\"pluginConfig\":\"The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\",\"previousTick\":\"The previous initialized tick before (or at) current global tick\",\"sqrtPrice\":\"The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\",\"tick\":\"The current global tick of the pool. May not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be initialized by new mints at multiples of this value e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ... However, tickspacing can be changed after the ticks have been initialized. This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The current tick spacing\"}},\"tickTable(int16)\":{\"params\":{\"wordPosition\":\"Index of 256-bits word with ticks\"},\"returns\":{\"_0\":\"The 256-bits word with packed ticks info\"}},\"tickTreeRoot()\":{\"details\":\"Each bit corresponds to one node in the second layer of tick tree: '1' if node has at least one active bit. **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"returns\":{\"_0\":\"The root of tick search tree as bitmap\"}},\"tickTreeSecondLayer(int16)\":{\"details\":\"Each bit in node corresponds to one node in the leafs layer (`tickTable`) of tick tree: '1' if leaf has at least one active bit. **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"returns\":{\"_0\":\"The node of tick search tree second layer\"}},\"ticks(int24)\":{\"details\":\"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**\",\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityDelta\":\"How much liquidity changes when the pool price crosses the tick\",\"liquidityTotal\":\"The total amount of position liquidity that uses the pool either as tick lower or tick upper\",\"nextTick\":\"The next tick in tick list\",\"outerFeeGrowth0Token\":\"The fee growth on the other side of the tick from the current tick in token0\",\"outerFeeGrowth1Token\":\"The fee growth on the other side of the tick from the current tick in token1 In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\",\"prevTick\":\"The previous tick in tick list\"}},\"totalFeeGrowth0Token()\":{\"details\":\"This value can overflow the uint256\",\"returns\":{\"_0\":\"The fee growth accumulator for token0\"}},\"totalFeeGrowth1Token()\":{\"details\":\"This value can overflow the uint256\",\"returns\":{\"_0\":\"The fee growth accumulator for token1\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"communityVault()\":{\"notice\":\"The contract to which community fees are transferred\"},\"fee()\":{\"notice\":\"The current pool fee value\"},\"getCommunityFeePending()\":{\"notice\":\"The amounts of token0 and token1 that will be sent to the vault\"},\"getPluginFeePending()\":{\"notice\":\"The amounts of token0 and token1 that will be sent to the plugin\"},\"getReserves()\":{\"notice\":\"The tracked token0 and token1 reserves of pool\"},\"globalState()\":{\"notice\":\"The globalState structure in the pool stores many values but requires only one slot and is exposed as a single method to save gas when accessed externally.\"},\"isUnlocked()\":{\"notice\":\"Allows to easily get current reentrancy lock status\"},\"lastFeeTransferTimestamp()\":{\"notice\":\"The timestamp of the last sending of tokens to vault/plugin\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"nextTickGlobal()\":{\"notice\":\"The next initialized tick after current global tick\"},\"plugin()\":{\"notice\":\"Returns the address of currently used plugin\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"prevTickGlobal()\":{\"notice\":\"The previous initialized tick before (or at) current global tick\"},\"safelyGetStateOfAMM()\":{\"notice\":\"Safely get most important state values of Algebra Integral AMM\"},\"tickSpacing()\":{\"notice\":\"The current tick spacing\"},\"tickTable(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickTree for more information\"},\"tickTreeRoot()\":{\"notice\":\"The root of tick search tree\"},\"tickTreeSecondLayer(int16)\":{\"notice\":\"The second layer of tick search tree\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"totalFeeGrowth0Token()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"totalFeeGrowth1Token()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/Algebra/src/core/contracts/interfaces/pool/IAlgebraPoolState.sol\":\"IAlgebraPoolState\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@Cyfrin/foundry-devops/=lib/foundry-devops/src/\",\":@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/\",\":@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/\",\":@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/\",\":@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/\",\":@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/\",\":@cryptoalgebra/integral-core/=lib/Algebra/src/core/\",\":@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/\",\":@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/\",\":@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@mento/core/=lib/mento-core/\",\":@mento/periphery/=lib/mento-router/\",\":@mento/std/=lib/mento-std/\",\":@openzeppelin-v5/=lib/openzeppelin-contracts-v5/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":@self/=node_modules/@selfxyz/contracts/contracts/\",\":@std/=lib/mento-router/lib/multicall/lib/forge-std/src/\",\":@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/\",\":@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/\",\":@synthetixio/governance/=lib/synthetix-v3/protocol/governance/\",\":@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/\",\":@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/v4-periphery/\",\":Algebra/=lib/Algebra/src/\",\":Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/\",\":celo-foundry/=lib/mento-deployment/lib/celo-foundry/\",\":celo/=lib/mento-core/node_modules/@celo/\",\":chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":contracts/=lib/mento-core/contracts/\",\":ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/\",\":foundry-devops/=lib/foundry-devops/\",\":governance-tests/=lib/governance-tests/\",\":hackathon-demo/=lib/hackathon-demo/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/\",\":mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/\",\":mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/\",\":mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/\",\":mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/\",\":mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/\",\":mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/\",\":mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/\",\":mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/\",\":mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/\",\":mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/\",\":mento-core/=lib/mento-core/contracts/\",\":mento-deployment/=lib/mento-deployment/\",\":mento-router/=lib/mento-router/\",\":mento-std/=lib/mento-std/src/\",\":merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/\",\":multicall/=lib/mento-router/lib/multicall/src/\",\":openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/\",\":openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":oracle-v2-playground/=lib/oracle-v2-playground/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":plugins-monorepo/=lib/plugins-monorepo/\",\":prb-math/=lib/mento-core/lib/prb-math/src/\",\":prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":prb/math/=lib/mento-core/lib/prb-math/src/\",\":redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/\",\":redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/\",\":safe-contracts/=lib/mento-core/lib/safe-contracts/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/\",\":synthetix-v3/=lib/synthetix-v3/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"]},\"sources\":{\"lib/Algebra/src/core/contracts/interfaces/pool/IAlgebraPoolState.sol\":{\"keccak256\":\"0xe061f0f9b5b16934173b1127efe13ccfe80465db17156d91c04e018b31e993fa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c607033ec09828f4a8667e7fd2e562814ec689d5806d95b4a248f57e0eff9d38\",\"dweb:/ipfs/QmbGBxBMSzPKitHmRjYJwGGEZVsXDQB6emSsZ19hjy6LUz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"communityVault","outputs":[{"internalType":"address","name":"communityVaultAddress","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"fee","outputs":[{"internalType":"uint16","name":"currentFee","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCommunityFeePending","outputs":[{"internalType":"uint128","name":"communityFeePending0","type":"uint128"},{"internalType":"uint128","name":"communityFeePending1","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPluginFeePending","outputs":[{"internalType":"uint128","name":"pluginFeePending0","type":"uint128"},{"internalType":"uint128","name":"pluginFeePending1","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getReserves","outputs":[{"internalType":"uint128","name":"reserve0","type":"uint128"},{"internalType":"uint128","name":"reserve1","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"globalState","outputs":[{"internalType":"uint160","name":"price","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"lastFee","type":"uint16"},{"internalType":"uint8","name":"pluginConfig","type":"uint8"},{"internalType":"uint16","name":"communityFee","type":"uint16"},{"internalType":"bool","name":"unlocked","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastFeeTransferTimestamp","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"nextTickGlobal","outputs":[{"internalType":"int24","name":"","type":"int24"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"plugin","outputs":[{"internalType":"address","name":"pluginAddress","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"positions","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"innerFeeGrowth0Token","type":"uint256"},{"internalType":"uint256","name":"innerFeeGrowth1Token","type":"uint256"},{"internalType":"uint128","name":"fees0","type":"uint128"},{"internalType":"uint128","name":"fees1","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"prevTickGlobal","outputs":[{"internalType":"int24","name":"","type":"int24"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"safelyGetStateOfAMM","outputs":[{"internalType":"uint160","name":"sqrtPrice","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"lastFee","type":"uint16"},{"internalType":"uint8","name":"pluginConfig","type":"uint8"},{"internalType":"uint128","name":"activeLiquidity","type":"uint128"},{"internalType":"int24","name":"nextTick","type":"int24"},{"internalType":"int24","name":"previousTick","type":"int24"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}]},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"stateMutability":"view","type":"function","name":"tickTable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"tickTreeRoot","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"int16","name":"","type":"int16"}],"stateMutability":"view","type":"function","name":"tickTreeSecondLayer","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"stateMutability":"view","type":"function","name":"ticks","outputs":[{"internalType":"uint256","name":"liquidityTotal","type":"uint256"},{"internalType":"int128","name":"liquidityDelta","type":"int128"},{"internalType":"int24","name":"prevTick","type":"int24"},{"internalType":"int24","name":"nextTick","type":"int24"},{"internalType":"uint256","name":"outerFeeGrowth0Token","type":"uint256"},{"internalType":"uint256","name":"outerFeeGrowth1Token","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalFeeGrowth0Token","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalFeeGrowth1Token","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"communityVault()":{"returns":{"communityVaultAddress":"The communityVault address"}},"fee()":{"details":"In case dynamic fee is enabled in the pool, this method will call the plugin to get the current fee. If the plugin implements complex fee logic, this method may return an incorrect value or revert. In this case, see the plugin implementation and related documentation.**important security note: caller should check reentrancy lock to prevent read-only reentrancy**","returns":{"currentFee":"The current pool fee value in hundredths of a bip, i.e. 1e-6"}},"getCommunityFeePending()":{"details":"Will be sent FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp","returns":{"communityFeePending0":"The amount of token0 that will be sent to the vault","communityFeePending1":"The amount of token1 that will be sent to the vault"}},"getPluginFeePending()":{"details":"Will be sent FEE_TRANSFER_FREQUENCY after feeLastTransferTimestamp","returns":{"pluginFeePending0":"The amount of token0 that will be sent to the plugin","pluginFeePending1":"The amount of token1 that will be sent to the plugin"}},"getReserves()":{"details":"If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee. If the balance exceeds uint128, the excess will be sent to the communityVault.","returns":{"reserve0":"The last known reserve of token0","reserve1":"The last known reserve of token1"}},"globalState()":{"details":"**important security note: caller should check `unlocked` flag to prevent read-only reentrancy**","returns":{"communityFee":"The community fee represented as a percent of all collected fee in thousandths, i.e. 1e-3 (so 100 is 10%)","lastFee":"The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin","pluginConfig":"The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic","price":"The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value","tick":"The current tick of the pool, i.e. according to the last tick transition that was run This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary","unlocked":"Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false"}},"isUnlocked()":{"details":"can be used to prevent read-only reentrancy. This method just returns `globalState.unlocked` value","returns":{"unlocked":"Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false"}},"lastFeeTransferTimestamp()":{"returns":{"_0":"The timestamp truncated to 32 bits"}},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks. Returned value cannot exceed type(uint128).max**important security note: caller should check reentrancy lock to prevent read-only reentrancy**","returns":{"_0":"The current in range liquidity"}},"nextTickGlobal()":{"details":"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**","returns":{"_0":"The next initialized tick"}},"plugin()":{"details":"The plugin is subject to change","returns":{"pluginAddress":"The address of currently used plugin"}},"positions(bytes32)":{"details":"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**","params":{"key":"The position's key is a packed concatenation of the owner address, bottomTick and topTick indexes"},"returns":{"fees0":"The computed amount of token0 owed to the position as of the last mint/burn/poke","fees1":"The computed amount of token1 owed to the position as of the last mint/burn/poke","innerFeeGrowth0Token":"Fee growth of token0 inside the tick range as of the last mint/burn/poke","innerFeeGrowth1Token":"Fee growth of token1 inside the tick range as of the last mint/burn/poke","liquidity":"The amount of liquidity in the position"}},"prevTickGlobal()":{"details":"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**","returns":{"_0":"The previous initialized tick"}},"safelyGetStateOfAMM()":{"details":"Several values exposed as a single method to save gas when accessed externally. **Important security note: this method checks reentrancy lock and should be preferred in most cases**.","returns":{"activeLiquidity":" The currently in-range liquidity available to the pool","lastFee":"The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin","nextTick":"The next initialized tick after current global tick","pluginConfig":"The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic","previousTick":"The previous initialized tick before (or at) current global tick","sqrtPrice":"The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value","tick":"The current global tick of the pool. May not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary"}},"tickSpacing()":{"details":"Ticks can only be initialized by new mints at multiples of this value e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ... However, tickspacing can be changed after the ticks have been initialized. This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The current tick spacing"}},"tickTable(int16)":{"params":{"wordPosition":"Index of 256-bits word with ticks"},"returns":{"_0":"The 256-bits word with packed ticks info"}},"tickTreeRoot()":{"details":"Each bit corresponds to one node in the second layer of tick tree: '1' if node has at least one active bit. **important security note: caller should check reentrancy lock to prevent read-only reentrancy**","returns":{"_0":"The root of tick search tree as bitmap"}},"tickTreeSecondLayer(int16)":{"details":"Each bit in node corresponds to one node in the leafs layer (`tickTable`) of tick tree: '1' if leaf has at least one active bit. **important security note: caller should check reentrancy lock to prevent read-only reentrancy**","returns":{"_0":"The node of tick search tree second layer"}},"ticks(int24)":{"details":"**important security note: caller should check reentrancy lock to prevent read-only reentrancy**","params":{"tick":"The tick to look up"},"returns":{"liquidityDelta":"How much liquidity changes when the pool price crosses the tick","liquidityTotal":"The total amount of position liquidity that uses the pool either as tick lower or tick upper","nextTick":"The next tick in tick list","outerFeeGrowth0Token":"The fee growth on the other side of the tick from the current tick in token0","outerFeeGrowth1Token":"The fee growth on the other side of the tick from the current tick in token1 In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.","prevTick":"The previous tick in tick list"}},"totalFeeGrowth0Token()":{"details":"This value can overflow the uint256","returns":{"_0":"The fee growth accumulator for token0"}},"totalFeeGrowth1Token()":{"details":"This value can overflow the uint256","returns":{"_0":"The fee growth accumulator for token1"}}},"version":1},"userdoc":{"kind":"user","methods":{"communityVault()":{"notice":"The contract to which community fees are transferred"},"fee()":{"notice":"The current pool fee value"},"getCommunityFeePending()":{"notice":"The amounts of token0 and token1 that will be sent to the vault"},"getPluginFeePending()":{"notice":"The amounts of token0 and token1 that will be sent to the plugin"},"getReserves()":{"notice":"The tracked token0 and token1 reserves of pool"},"globalState()":{"notice":"The globalState structure in the pool stores many values but requires only one slot and is exposed as a single method to save gas when accessed externally."},"isUnlocked()":{"notice":"Allows to easily get current reentrancy lock status"},"lastFeeTransferTimestamp()":{"notice":"The timestamp of the last sending of tokens to vault/plugin"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"nextTickGlobal()":{"notice":"The next initialized tick after current global tick"},"plugin()":{"notice":"Returns the address of currently used plugin"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"prevTickGlobal()":{"notice":"The previous initialized tick before (or at) current global tick"},"safelyGetStateOfAMM()":{"notice":"Safely get most important state values of Algebra Integral AMM"},"tickSpacing()":{"notice":"The current tick spacing"},"tickTable(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickTree for more information"},"tickTreeRoot()":{"notice":"The root of tick search tree"},"tickTreeSecondLayer(int16)":{"notice":"The second layer of tick search tree"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"},"totalFeeGrowth0Token()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"totalFeeGrowth1Token()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"}},"version":1}},"settings":{"remappings":["@Cyfrin/foundry-devops/=lib/foundry-devops/src/","@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/","@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/","@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/","@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/","@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/","@cryptoalgebra/integral-core/=lib/Algebra/src/core/","@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/","@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/","@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/","@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@mento/core/=lib/mento-core/","@mento/periphery/=lib/mento-router/","@mento/std/=lib/mento-std/","@openzeppelin-v5/=lib/openzeppelin-contracts-v5/","@openzeppelin/=lib/openzeppelin-contracts/","@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","@self/=node_modules/@selfxyz/contracts/contracts/","@std/=lib/mento-router/lib/multicall/lib/forge-std/src/","@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/","@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/","@synthetixio/governance/=lib/synthetix-v3/protocol/governance/","@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/","@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","@uniswap/v4-periphery/=lib/v4-periphery/","Algebra/=lib/Algebra/src/","Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/","celo-foundry/=lib/mento-deployment/lib/celo-foundry/","celo/=lib/mento-core/node_modules/@celo/","chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","contracts/=lib/mento-core/contracts/","ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/","forge-std/=lib/forge-std/src/","foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/","foundry-devops/=lib/foundry-devops/","governance-tests/=lib/governance-tests/","hackathon-demo/=lib/hackathon-demo/","halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/","mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/","mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/","mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/","mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/","mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/","mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/","mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/","mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/","mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/","mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/","mento-core/=lib/mento-core/contracts/","mento-deployment/=lib/mento-deployment/","mento-router/=lib/mento-router/","mento-std/=lib/mento-std/src/","merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/","multicall/=lib/mento-router/lib/multicall/src/","openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/","openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","oracle-v2-playground/=lib/oracle-v2-playground/","permit2/=lib/v4-periphery/lib/permit2/","plugins-monorepo/=lib/plugins-monorepo/","prb-math/=lib/mento-core/lib/prb-math/src/","prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","prb/math/=lib/mento-core/lib/prb-math/src/","redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/","redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/","safe-contracts/=lib/mento-core/lib/safe-contracts/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/","synthetix-v3/=lib/synthetix-v3/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"lib/Algebra/src/core/contracts/interfaces/pool/IAlgebraPoolState.sol":"IAlgebraPoolState"},"evmVersion":"shanghai","libraries":{}},"sources":{"lib/Algebra/src/core/contracts/interfaces/pool/IAlgebraPoolState.sol":{"keccak256":"0xe061f0f9b5b16934173b1127efe13ccfe80465db17156d91c04e018b31e993fa","urls":["bzz-raw://c607033ec09828f4a8667e7fd2e562814ec689d5806d95b4a248f57e0eff9d38","dweb:/ipfs/QmbGBxBMSzPKitHmRjYJwGGEZVsXDQB6emSsZ19hjy6LUz"],"license":"GPL-2.0-or-later"}},"version":1},"id":26}