{"abi":[{"type":"function","name":"cleanExpiredLocks","inputs":[{"name":"accountId","type":"uint128","internalType":"uint128"},{"name":"collateralType","type":"address","internalType":"address"},{"name":"offset","type":"uint256","internalType":"uint256"},{"name":"count","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"cleared","type":"uint256","internalType":"uint256"},{"name":"remainingLockAmountD18","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"createLock","inputs":[{"name":"accountId","type":"uint128","internalType":"uint128"},{"name":"collateralType","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"expireTimestamp","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deposit","inputs":[{"name":"accountId","type":"uint128","internalType":"uint128"},{"name":"collateralType","type":"address","internalType":"address"},{"name":"tokenAmount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getAccountAvailableCollateral","inputs":[{"name":"accountId","type":"uint128","internalType":"uint128"},{"name":"collateralType","type":"address","internalType":"address"}],"outputs":[{"name":"amountD18","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAccountCollateral","inputs":[{"name":"accountId","type":"uint128","internalType":"uint128"},{"name":"collateralType","type":"address","internalType":"address"}],"outputs":[{"name":"totalDeposited","type":"uint256","internalType":"uint256"},{"name":"totalAssigned","type":"uint256","internalType":"uint256"},{"name":"totalLocked","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLocks","inputs":[{"name":"accountId","type":"uint128","internalType":"uint128"},{"name":"collateralType","type":"address","internalType":"address"},{"name":"offset","type":"uint256","internalType":"uint256"},{"name":"count","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"locks","type":"tuple[]","internalType":"struct CollateralLock.Data[]","components":[{"name":"amountD18","type":"uint128","internalType":"uint128"},{"name":"lockExpirationTime","type":"uint64","internalType":"uint64"}]}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[{"name":"accountId","type":"uint128","internalType":"uint128"},{"name":"collateralType","type":"address","internalType":"address"},{"name":"tokenAmount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"CollateralLockCreated","inputs":[{"name":"accountId","type":"uint128","indexed":true,"internalType":"uint128"},{"name":"collateralType","type":"address","indexed":true,"internalType":"address"},{"name":"tokenAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"expireTimestamp","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"CollateralLockExpired","inputs":[{"name":"tokenAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"expireTimestamp","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"Deposited","inputs":[{"name":"accountId","type":"uint128","indexed":true,"internalType":"uint128"},{"name":"collateralType","type":"address","indexed":true,"internalType":"address"},{"name":"tokenAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"sender","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Withdrawn","inputs":[{"name":"accountId","type":"uint128","indexed":true,"internalType":"uint128"},{"name":"collateralType","type":"address","indexed":true,"internalType":"address"},{"name":"tokenAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"sender","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"DeprecatedDeposit","inputs":[]},{"type":"error","name":"InsufficientAccountCollateral","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"cleanExpiredLocks(uint128,address,uint256,uint256)":"198f0aa1","createLock(uint128,address,uint256,uint64)":"0bae9893","deposit(uint128,address,uint256)":"83802968","getAccountAvailableCollateral(uint128,address)":"927482ff","getAccountCollateral(uint128,address)":"ef45148e","getLocks(uint128,address,uint256,uint256)":"aa8c6369","withdraw(uint128,address,uint256)":"95997c51"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DeprecatedDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAccountCollateral\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"}],\"name\":\"CollateralLockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"}],\"name\":\"CollateralLockExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"cleanExpiredLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cleared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingLockAmountD18\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getAccountAvailableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountD18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getAccountCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssigned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountD18\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lockExpirationTime\",\"type\":\"uint64\"}],\"internalType\":\"struct CollateralLock.Data[]\",\"name\":\"locks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accountId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CollateralLockCreated(uint128,address,uint256,uint64)\":{\"params\":{\"accountId\":\"The id of the account that received a lock\",\"collateralType\":\"The address of the collateral type that was locked\",\"expireTimestamp\":\"unix timestamp at which the lock is due to expire\",\"tokenAmount\":\"The amount of collateral that was locked, demoninated in system units (1e18)\"}},\"CollateralLockExpired(uint256,uint64)\":{\"params\":{\"expireTimestamp\":\"unix timestamp at which the unlock is due to expire\",\"tokenAmount\":\"The amount of collateral that was unlocked, demoninated in system units (1e18)\"}},\"Deposited(uint128,address,uint256,address)\":{\"params\":{\"accountId\":\"The id of the account that deposited collateral.\",\"collateralType\":\"The address of the collateral that was deposited.\",\"sender\":\"The address of the account that triggered the deposit.\",\"tokenAmount\":\"The amount of collateral that was deposited, denominated in the token's native decimal representation.\"}},\"Withdrawn(uint128,address,uint256,address)\":{\"params\":{\"accountId\":\"The id of the account that withdrew collateral.\",\"collateralType\":\"The address of the collateral that was withdrawn.\",\"sender\":\"The address of the account that triggered the withdrawal.\",\"tokenAmount\":\"The amount of collateral that was withdrawn, denominated in the token's native decimal representation.\"}}},\"kind\":\"dev\",\"methods\":{\"cleanExpiredLocks(uint128,address,uint256,uint256)\":{\"params\":{\"accountId\":\"The id of the account whose locks are being cleared.\",\"collateralType\":\"The address of the collateral type to clean locks for.\",\"count\":\"The number of slots to check for cleaning locks. Set to 0 to clean all locks at/after offset\",\"offset\":\"The index of the first lock to clear.\"},\"returns\":{\"cleared\":\"the number of locks that were actually expired (and therefore cleared)\"}},\"createLock(uint128,address,uint256,uint64)\":{\"details\":\"Collateral can be withdrawn from the system if it is not assigned or delegated to a pool. Collateral locks are an additional restriction that applies on top of that. I.e. if collateral is not assigned to a pool, but has a lock, it cannot be withdrawn.Collateral locks are initially intended for the Synthetix v2 to v3 migration, but may be used in the future by the Spartan Council, for example, to create and hand off accounts whose withdrawals from the system are locked for a given amount of time.\",\"params\":{\"accountId\":\"The id of the account for which a lock is to be created.\",\"amount\":\"The amount of collateral tokens to wrap in the lock being created, denominated with 18 decimals of precision.\",\"collateralType\":\"The address of the collateral type for which the lock will be created.\",\"expireTimestamp\":\"The date in which the lock will become clearable.\"}},\"deposit(uint128,address,uint256)\":{\"details\":\"Anyone can deposit into anyone's active account without restriction.Depositing to account will automatically clear expired locks on a user's account. If there are an extremely large number of locks to process, it may not be possible to call `deposit` due to the block gas limit. In cases such as these, `cleanExpiredLocks` must be called first to clear any outstanding locks.\",\"params\":{\"accountId\":\"The id of the account that is making the deposit.\",\"collateralType\":\"The address of the token to be deposited.\",\"tokenAmount\":\"The amount being deposited, denominated in the token's native decimal representation. Emits a {Deposited} event.\"}},\"getAccountAvailableCollateral(uint128,address)\":{\"params\":{\"accountId\":\"The id of the account whose collateral is being queried.\",\"collateralType\":\"The address of the collateral type whose amount is being queried.\"},\"returns\":{\"amountD18\":\"The amount of collateral that is available for withdrawal or delegation, denominated with 18 decimals of precision.\"}},\"getAccountCollateral(uint128,address)\":{\"params\":{\"accountId\":\"The id of the account whose collateral is being queried.\",\"collateralType\":\"The address of the collateral type whose amount is being queried.\"},\"returns\":{\"totalAssigned\":\"The amount of collateral in the account that is delegated to pools, denominated with 18 decimals of precision.\",\"totalDeposited\":\"The total collateral deposited in the account, denominated with 18 decimals of precision.\",\"totalLocked\":\"The amount of collateral in the account that cannot currently be undelegated from a pool, denominated with 18 decimals of precision.\"}},\"getLocks(uint128,address,uint256,uint256)\":{\"params\":{\"accountId\":\"The id of the account whose locks we want to read\",\"collateralType\":\"The address of the collateral type for locks we want to read\",\"count\":\"The number of slots to check for cleaning locks. Set to 0 to read all locks after offset\",\"offset\":\"The index of the first lock to read\"}},\"withdraw(uint128,address,uint256)\":{\"params\":{\"accountId\":\"The id of the account that is making the withdrawal.\",\"collateralType\":\"The address of the token to be withdrawn.\",\"tokenAmount\":\"The amount being withdrawn, denominated in the token's native decimal representation. Requirements: - `ERC2771Context._msgSender()` must be the owner of the account, have the `ADMIN` permission, or have the `WITHDRAW` permission. Emits a {Withdrawn} event.\"}}},\"title\":\"Module for managing user collateral.\",\"version\":1},\"userdoc\":{\"errors\":{\"DeprecatedDeposit()\":[{\"notice\":\"Thrown when a deposited collateral cannot be withdrawn because it has been deprecated.\"}],\"InsufficientAccountCollateral(uint256)\":[{\"notice\":\"Thrown when an interacting account does not have sufficient collateral for an operation (withdrawal, lock, etc).\"}]},\"events\":{\"CollateralLockCreated(uint128,address,uint256,uint64)\":{\"notice\":\"Emitted when a lock is created on someone's account\"},\"CollateralLockExpired(uint256,uint64)\":{\"notice\":\"Emitted when a lock is cleared from an account due to expiration\"},\"Deposited(uint128,address,uint256,address)\":{\"notice\":\"Emitted when `tokenAmount` of collateral of type `collateralType` is deposited to account `accountId` by `sender`.\"},\"Withdrawn(uint128,address,uint256,address)\":{\"notice\":\"Emitted when `tokenAmount` of collateral of type `collateralType` is withdrawn from account `accountId` by `sender`.\"}},\"kind\":\"user\",\"methods\":{\"cleanExpiredLocks(uint128,address,uint256,uint256)\":{\"notice\":\"Clean expired locks from locked collateral arrays for an account/collateral type. It includes offset and items to prevent gas exhaustion. If both, offset and items, are 0 it will traverse the whole array (unlimited).\"},\"createLock(uint128,address,uint256,uint64)\":{\"notice\":\"Create a new lock on the given account. you must have `admin` permission on the specified account to create a lock.\"},\"deposit(uint128,address,uint256)\":{\"notice\":\"Deposits `tokenAmount` of collateral of type `collateralType` into account `accountId`.\"},\"getAccountAvailableCollateral(uint128,address)\":{\"notice\":\"Returns the amount of collateral of type `collateralType` deposited with account `accountId` that can be withdrawn or delegated to pools.\"},\"getAccountCollateral(uint128,address)\":{\"notice\":\"Returns the total values pertaining to account `accountId` for `collateralType`.\"},\"getLocks(uint128,address,uint256,uint256)\":{\"notice\":\"Get a list of locks existing in account. Lists all locks in storage, even if they are expired\"},\"withdraw(uint128,address,uint256)\":{\"notice\":\"Withdraws `tokenAmount` of collateral of type `collateralType` from account `accountId`.\"}},\"notice\":\"Allows users to deposit and withdraw collateral from the system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/synthetix-v3/protocol/synthetix/contracts/interfaces/ICollateralModule.sol\":\"ICollateralModule\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@Cyfrin/foundry-devops/=lib/foundry-devops/src/\",\":@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/\",\":@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/\",\":@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/\",\":@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/\",\":@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/\",\":@cryptoalgebra/integral-core/=lib/Algebra/src/core/\",\":@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/\",\":@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/\",\":@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@mento/core/=lib/mento-core/\",\":@mento/periphery/=lib/mento-router/\",\":@mento/std/=lib/mento-std/\",\":@openzeppelin-v5/=lib/openzeppelin-contracts-v5/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":@self/=node_modules/@selfxyz/contracts/contracts/\",\":@std/=lib/mento-router/lib/multicall/lib/forge-std/src/\",\":@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/\",\":@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/\",\":@synthetixio/governance/=lib/synthetix-v3/protocol/governance/\",\":@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/\",\":@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/v4-periphery/\",\":Algebra/=lib/Algebra/src/\",\":Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/\",\":celo-foundry/=lib/mento-deployment/lib/celo-foundry/\",\":celo/=lib/mento-core/node_modules/@celo/\",\":chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":contracts/=lib/mento-core/contracts/\",\":ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/\",\":foundry-devops/=lib/foundry-devops/\",\":governance-tests/=lib/governance-tests/\",\":hackathon-demo/=lib/hackathon-demo/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/\",\":mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/\",\":mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/\",\":mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/\",\":mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/\",\":mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/\",\":mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/\",\":mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/\",\":mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/\",\":mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/\",\":mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/\",\":mento-core/=lib/mento-core/contracts/\",\":mento-deployment/=lib/mento-deployment/\",\":mento-router/=lib/mento-router/\",\":mento-std/=lib/mento-std/src/\",\":merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/\",\":multicall/=lib/mento-router/lib/multicall/src/\",\":openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/\",\":openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":oracle-v2-playground/=lib/oracle-v2-playground/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":plugins-monorepo/=lib/plugins-monorepo/\",\":prb-math/=lib/mento-core/lib/prb-math/src/\",\":prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":prb/math/=lib/mento-core/lib/prb-math/src/\",\":redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/\",\":redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/\",\":safe-contracts/=lib/mento-core/lib/safe-contracts/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/\",\":synthetix-v3/=lib/synthetix-v3/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"]},\"sources\":{\"lib/synthetix-v3/protocol/synthetix/contracts/interfaces/ICollateralModule.sol\":{\"keccak256\":\"0x90a22b235468c24f3bb56d6fe24fdf15ba7294fda6e12eeb1c12fb36b9c42e54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ae8cc93674a38fe87b5ed3f6a0e6c06543c47ab8f6aecbd5c2906040d8fd617\",\"dweb:/ipfs/QmUo3iX7TQiUUa1U8RxNCTCfbrJWqgc4JzPUS45t2ypzAS\"]},\"lib/synthetix-v3/protocol/synthetix/contracts/storage/CollateralLock.sol\":{\"keccak256\":\"0xe58cc33e650e6704b6f76002c2bbd282aa0855dbc9e6ccb0da8f9655a48c5f31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1f5be1eb24d5b7dacb36e638efc0c09c95d5b954f67ed889a300217fd84e7fa\",\"dweb:/ipfs/QmVUNKxkcPPNYr8hSazNanaz3HMYgwBLF2fbYE4ptyfXKL\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"DeprecatedDeposit"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"type":"error","name":"InsufficientAccountCollateral"},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128","indexed":true},{"internalType":"address","name":"collateralType","type":"address","indexed":true},{"internalType":"uint256","name":"tokenAmount","type":"uint256","indexed":false},{"internalType":"uint64","name":"expireTimestamp","type":"uint64","indexed":false}],"type":"event","name":"CollateralLockCreated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"tokenAmount","type":"uint256","indexed":false},{"internalType":"uint64","name":"expireTimestamp","type":"uint64","indexed":false}],"type":"event","name":"CollateralLockExpired","anonymous":false},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128","indexed":true},{"internalType":"address","name":"collateralType","type":"address","indexed":true},{"internalType":"uint256","name":"tokenAmount","type":"uint256","indexed":false},{"internalType":"address","name":"sender","type":"address","indexed":true}],"type":"event","name":"Deposited","anonymous":false},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128","indexed":true},{"internalType":"address","name":"collateralType","type":"address","indexed":true},{"internalType":"uint256","name":"tokenAmount","type":"uint256","indexed":false},{"internalType":"address","name":"sender","type":"address","indexed":true}],"type":"event","name":"Withdrawn","anonymous":false},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128"},{"internalType":"address","name":"collateralType","type":"address"},{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"cleanExpiredLocks","outputs":[{"internalType":"uint256","name":"cleared","type":"uint256"},{"internalType":"uint256","name":"remainingLockAmountD18","type":"uint256"}]},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128"},{"internalType":"address","name":"collateralType","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint64","name":"expireTimestamp","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"createLock"},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128"},{"internalType":"address","name":"collateralType","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"deposit"},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128"},{"internalType":"address","name":"collateralType","type":"address"}],"stateMutability":"view","type":"function","name":"getAccountAvailableCollateral","outputs":[{"internalType":"uint256","name":"amountD18","type":"uint256"}]},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128"},{"internalType":"address","name":"collateralType","type":"address"}],"stateMutability":"view","type":"function","name":"getAccountCollateral","outputs":[{"internalType":"uint256","name":"totalDeposited","type":"uint256"},{"internalType":"uint256","name":"totalAssigned","type":"uint256"},{"internalType":"uint256","name":"totalLocked","type":"uint256"}]},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128"},{"internalType":"address","name":"collateralType","type":"address"},{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function","name":"getLocks","outputs":[{"internalType":"struct CollateralLock.Data[]","name":"locks","type":"tuple[]","components":[{"internalType":"uint128","name":"amountD18","type":"uint128"},{"internalType":"uint64","name":"lockExpirationTime","type":"uint64"}]}]},{"inputs":[{"internalType":"uint128","name":"accountId","type":"uint128"},{"internalType":"address","name":"collateralType","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdraw"}],"devdoc":{"kind":"dev","methods":{"cleanExpiredLocks(uint128,address,uint256,uint256)":{"params":{"accountId":"The id of the account whose locks are being cleared.","collateralType":"The address of the collateral type to clean locks for.","count":"The number of slots to check for cleaning locks. Set to 0 to clean all locks at/after offset","offset":"The index of the first lock to clear."},"returns":{"cleared":"the number of locks that were actually expired (and therefore cleared)"}},"createLock(uint128,address,uint256,uint64)":{"details":"Collateral can be withdrawn from the system if it is not assigned or delegated to a pool. Collateral locks are an additional restriction that applies on top of that. I.e. if collateral is not assigned to a pool, but has a lock, it cannot be withdrawn.Collateral locks are initially intended for the Synthetix v2 to v3 migration, but may be used in the future by the Spartan Council, for example, to create and hand off accounts whose withdrawals from the system are locked for a given amount of time.","params":{"accountId":"The id of the account for which a lock is to be created.","amount":"The amount of collateral tokens to wrap in the lock being created, denominated with 18 decimals of precision.","collateralType":"The address of the collateral type for which the lock will be created.","expireTimestamp":"The date in which the lock will become clearable."}},"deposit(uint128,address,uint256)":{"details":"Anyone can deposit into anyone's active account without restriction.Depositing to account will automatically clear expired locks on a user's account. If there are an extremely large number of locks to process, it may not be possible to call `deposit` due to the block gas limit. In cases such as these, `cleanExpiredLocks` must be called first to clear any outstanding locks.","params":{"accountId":"The id of the account that is making the deposit.","collateralType":"The address of the token to be deposited.","tokenAmount":"The amount being deposited, denominated in the token's native decimal representation. Emits a {Deposited} event."}},"getAccountAvailableCollateral(uint128,address)":{"params":{"accountId":"The id of the account whose collateral is being queried.","collateralType":"The address of the collateral type whose amount is being queried."},"returns":{"amountD18":"The amount of collateral that is available for withdrawal or delegation, denominated with 18 decimals of precision."}},"getAccountCollateral(uint128,address)":{"params":{"accountId":"The id of the account whose collateral is being queried.","collateralType":"The address of the collateral type whose amount is being queried."},"returns":{"totalAssigned":"The amount of collateral in the account that is delegated to pools, denominated with 18 decimals of precision.","totalDeposited":"The total collateral deposited in the account, denominated with 18 decimals of precision.","totalLocked":"The amount of collateral in the account that cannot currently be undelegated from a pool, denominated with 18 decimals of precision."}},"getLocks(uint128,address,uint256,uint256)":{"params":{"accountId":"The id of the account whose locks we want to read","collateralType":"The address of the collateral type for locks we want to read","count":"The number of slots to check for cleaning locks. Set to 0 to read all locks after offset","offset":"The index of the first lock to read"}},"withdraw(uint128,address,uint256)":{"params":{"accountId":"The id of the account that is making the withdrawal.","collateralType":"The address of the token to be withdrawn.","tokenAmount":"The amount being withdrawn, denominated in the token's native decimal representation. Requirements: - `ERC2771Context._msgSender()` must be the owner of the account, have the `ADMIN` permission, or have the `WITHDRAW` permission. Emits a {Withdrawn} event."}}},"version":1},"userdoc":{"kind":"user","methods":{"cleanExpiredLocks(uint128,address,uint256,uint256)":{"notice":"Clean expired locks from locked collateral arrays for an account/collateral type. It includes offset and items to prevent gas exhaustion. If both, offset and items, are 0 it will traverse the whole array (unlimited)."},"createLock(uint128,address,uint256,uint64)":{"notice":"Create a new lock on the given account. you must have `admin` permission on the specified account to create a lock."},"deposit(uint128,address,uint256)":{"notice":"Deposits `tokenAmount` of collateral of type `collateralType` into account `accountId`."},"getAccountAvailableCollateral(uint128,address)":{"notice":"Returns the amount of collateral of type `collateralType` deposited with account `accountId` that can be withdrawn or delegated to pools."},"getAccountCollateral(uint128,address)":{"notice":"Returns the total values pertaining to account `accountId` for `collateralType`."},"getLocks(uint128,address,uint256,uint256)":{"notice":"Get a list of locks existing in account. Lists all locks in storage, even if they are expired"},"withdraw(uint128,address,uint256)":{"notice":"Withdraws `tokenAmount` of collateral of type `collateralType` from account `accountId`."}},"version":1}},"settings":{"remappings":["@Cyfrin/foundry-devops/=lib/foundry-devops/src/","@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/","@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/","@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/","@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/","@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/","@cryptoalgebra/integral-core/=lib/Algebra/src/core/","@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/","@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/","@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/","@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@mento/core/=lib/mento-core/","@mento/periphery/=lib/mento-router/","@mento/std/=lib/mento-std/","@openzeppelin-v5/=lib/openzeppelin-contracts-v5/","@openzeppelin/=lib/openzeppelin-contracts/","@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","@self/=node_modules/@selfxyz/contracts/contracts/","@std/=lib/mento-router/lib/multicall/lib/forge-std/src/","@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/","@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/","@synthetixio/governance/=lib/synthetix-v3/protocol/governance/","@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/","@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","@uniswap/v4-periphery/=lib/v4-periphery/","Algebra/=lib/Algebra/src/","Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/","celo-foundry/=lib/mento-deployment/lib/celo-foundry/","celo/=lib/mento-core/node_modules/@celo/","chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","contracts/=lib/mento-core/contracts/","ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/","forge-std/=lib/forge-std/src/","foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/","foundry-devops/=lib/foundry-devops/","governance-tests/=lib/governance-tests/","hackathon-demo/=lib/hackathon-demo/","halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/","mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/","mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/","mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/","mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/","mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/","mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/","mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/","mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/","mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/","mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/","mento-core/=lib/mento-core/contracts/","mento-deployment/=lib/mento-deployment/","mento-router/=lib/mento-router/","mento-std/=lib/mento-std/src/","merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/","multicall/=lib/mento-router/lib/multicall/src/","openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/","openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","oracle-v2-playground/=lib/oracle-v2-playground/","permit2/=lib/v4-periphery/lib/permit2/","plugins-monorepo/=lib/plugins-monorepo/","prb-math/=lib/mento-core/lib/prb-math/src/","prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","prb/math/=lib/mento-core/lib/prb-math/src/","redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/","redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/","safe-contracts/=lib/mento-core/lib/safe-contracts/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/","synthetix-v3/=lib/synthetix-v3/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"lib/synthetix-v3/protocol/synthetix/contracts/interfaces/ICollateralModule.sol":"ICollateralModule"},"evmVersion":"shanghai","libraries":{}},"sources":{"lib/synthetix-v3/protocol/synthetix/contracts/interfaces/ICollateralModule.sol":{"keccak256":"0x90a22b235468c24f3bb56d6fe24fdf15ba7294fda6e12eeb1c12fb36b9c42e54","urls":["bzz-raw://0ae8cc93674a38fe87b5ed3f6a0e6c06543c47ab8f6aecbd5c2906040d8fd617","dweb:/ipfs/QmUo3iX7TQiUUa1U8RxNCTCfbrJWqgc4JzPUS45t2ypzAS"],"license":"MIT"},"lib/synthetix-v3/protocol/synthetix/contracts/storage/CollateralLock.sol":{"keccak256":"0xe58cc33e650e6704b6f76002c2bbd282aa0855dbc9e6ccb0da8f9655a48c5f31","urls":["bzz-raw://b1f5be1eb24d5b7dacb36e638efc0c09c95d5b954f67ed889a300217fd84e7fa","dweb:/ipfs/QmVUNKxkcPPNYr8hSazNanaz3HMYgwBLF2fbYE4ptyfXKL"],"license":"MIT"}},"version":1},"id":129}