{"abi":[{"type":"function","name":"batchUpdateDscCircuitVerifiers","inputs":[{"name":"attestationIds","type":"bytes32[]","internalType":"bytes32[]"},{"name":"typeIds","type":"uint256[]","internalType":"uint256[]"},{"name":"verifierAddresses","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"batchUpdateRegisterCircuitVerifiers","inputs":[{"name":"attestationIds","type":"bytes32[]","internalType":"bytes32[]"},{"name":"typeIds","type":"uint256[]","internalType":"uint256[]"},{"name":"verifierAddresses","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"discloseVerifier","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"dscCircuitVerifiers","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"generateConfigId","inputs":[{"name":"config","type":"tuple","internalType":"struct SelfStructs.VerificationConfigV2","components":[{"name":"olderThanEnabled","type":"bool","internalType":"bool"},{"name":"olderThan","type":"uint256","internalType":"uint256"},{"name":"forbiddenCountriesEnabled","type":"bool","internalType":"bool"},{"name":"forbiddenCountriesListPacked","type":"uint256[4]","internalType":"uint256[4]"},{"name":"ofacEnabled","type":"bool[3]","internalType":"bool[3]"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"getIdentityCommitmentMerkleRoot","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"registerCircuitVerifiers","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"registerCommitment","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"registerCircuitVerifierId","type":"uint256","internalType":"uint256"},{"name":"registerCircuitProof","type":"tuple","internalType":"struct IRegisterCircuitVerifier.RegisterCircuitProof","components":[{"name":"a","type":"uint256[2]","internalType":"uint256[2]"},{"name":"b","type":"uint256[2][2]","internalType":"uint256[2][2]"},{"name":"c","type":"uint256[2]","internalType":"uint256[2]"},{"name":"pubSignals","type":"uint256[3]","internalType":"uint256[3]"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerDscKeyCommitment","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"dscCircuitVerifierId","type":"uint256","internalType":"uint256"},{"name":"dscCircuitProof","type":"tuple","internalType":"struct IDscCircuitVerifier.DscCircuitProof","components":[{"name":"a","type":"uint256[2]","internalType":"uint256[2]"},{"name":"b","type":"uint256[2][2]","internalType":"uint256[2][2]"},{"name":"c","type":"uint256[2]","internalType":"uint256[2]"},{"name":"pubSignals","type":"uint256[2]","internalType":"uint256[2]"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registry","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"rootTimestamp","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"root","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setVerificationConfigV2","inputs":[{"name":"config","type":"tuple","internalType":"struct SelfStructs.VerificationConfigV2","components":[{"name":"olderThanEnabled","type":"bool","internalType":"bool"},{"name":"olderThan","type":"uint256","internalType":"uint256"},{"name":"forbiddenCountriesEnabled","type":"bool","internalType":"bool"},{"name":"forbiddenCountriesListPacked","type":"uint256[4]","internalType":"uint256[4]"},{"name":"ofacEnabled","type":"bool[3]","internalType":"bool[3]"}]}],"outputs":[{"name":"configId","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"updateDscVerifier","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"},{"name":"verifierAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateRegisterCircuitVerifier","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"},{"name":"verifierAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateRegistry","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"registryAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateVcAndDiscloseCircuit","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"vcAndDiscloseCircuitVerifierAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"verificationConfigV2Exists","inputs":[{"name":"configId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"exists","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"verify","inputs":[{"name":"baseVerificationInput","type":"bytes","internalType":"bytes"},{"name":"userContextData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])":"2d053328","batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])":"54ff2371","discloseVerifier(bytes32)":"ab15be08","dscCircuitVerifiers(bytes32,uint256)":"ca56259e","generateConfigId((bool,uint256,bool,uint256[4],bool[3]))":"a1cbb9fd","getIdentityCommitmentMerkleRoot(bytes32)":"8829b090","registerCircuitVerifiers(bytes32,uint256)":"ab9ddbfc","registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))":"8846ec42","registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))":"8322963f","registry(bytes32)":"7ef50298","rootTimestamp(bytes32,uint256)":"678c09dd","setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))":"09ddb091","updateDscVerifier(bytes32,uint256,address)":"d88e6a15","updateRegisterCircuitVerifier(bytes32,uint256,address)":"34c14589","updateRegistry(bytes32,address)":"1f299c1a","updateVcAndDiscloseCircuit(bytes32,address)":"9ffc9aea","verificationConfigV2Exists(bytes32)":"2e9c365e","verify(bytes,bytes)":"f7e83aee"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"attestationIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"typeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"batchUpdateDscCircuitVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"attestationIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"typeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"batchUpdateRegisterCircuitVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"}],\"name\":\"discloseVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"dscCircuitVerifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"olderThanEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"olderThan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forbiddenCountriesEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"forbiddenCountriesListPacked\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool[3]\",\"name\":\"ofacEnabled\",\"type\":\"bool[3]\"}],\"internalType\":\"struct SelfStructs.VerificationConfigV2\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"generateConfigId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"}],\"name\":\"getIdentityCommitmentMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"registerCircuitVerifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"registerCircuitVerifierId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"pubSignals\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct IRegisterCircuitVerifier.RegisterCircuitProof\",\"name\":\"registerCircuitProof\",\"type\":\"tuple\"}],\"name\":\"registerCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dscCircuitVerifierId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"pubSignals\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IDscCircuitVerifier.DscCircuitProof\",\"name\":\"dscCircuitProof\",\"type\":\"tuple\"}],\"name\":\"registerDscKeyCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"rootTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"olderThanEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"olderThan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forbiddenCountriesEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"forbiddenCountriesListPacked\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool[3]\",\"name\":\"ofacEnabled\",\"type\":\"bool[3]\"}],\"internalType\":\"struct SelfStructs.VerificationConfigV2\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setVerificationConfigV2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"configId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"updateDscVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"updateRegisterCircuitVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"vcAndDiscloseCircuitVerifierAddress\",\"type\":\"address\"}],\"name\":\"updateVcAndDiscloseCircuit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configId\",\"type\":\"bytes32\"}],\"name\":\"verificationConfigV2Exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"baseVerificationInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userContextData\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Defines all external and public functions from IdentityVerificationHubImplV2.\",\"kind\":\"dev\",\"methods\":{\"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])\":{\"params\":{\"attestationIds\":\"An array of attestation identifiers.\",\"typeIds\":\"An array of signature type identifiers.\",\"verifierAddresses\":\"An array of new DSC circuit verifier addresses.\"}},\"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])\":{\"params\":{\"attestationIds\":\"An array of attestation identifiers.\",\"typeIds\":\"An array of signature type identifiers.\",\"verifierAddresses\":\"An array of new register circuit verifier addresses.\"}},\"discloseVerifier(bytes32)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\"},\"returns\":{\"_0\":\"The disclose verifier address associated with the attestation ID.\"}},\"dscCircuitVerifiers(bytes32,uint256)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\",\"typeId\":\"The type ID to query.\"},\"returns\":{\"_0\":\"The DSC circuit verifier address associated with the attestation ID and type ID.\"}},\"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))\":{\"params\":{\"config\":\"The verification configuration\"},\"returns\":{\"_0\":\"The generated config ID (sha256 hash of encoded config)\"}},\"getIdentityCommitmentMerkleRoot(bytes32)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\"},\"returns\":{\"_0\":\"The identity commitment merkle root associated with the attestation ID.\"}},\"registerCircuitVerifiers(bytes32,uint256)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\",\"typeId\":\"The type ID to query.\"},\"returns\":{\"_0\":\"The register circuit verifier address associated with the attestation ID and type ID.\"}},\"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))\":{\"details\":\"Verifies the register circuit proof and then calls the Identity Registry to register the commitment.\",\"params\":{\"attestationId\":\"The attestation ID.\",\"registerCircuitProof\":\"The register circuit proof data.\",\"registerCircuitVerifierId\":\"The identifier for the register circuit verifier to use.\"}},\"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))\":{\"details\":\"Verifies the DSC proof and then calls the Identity Registry to register the dsc key commitment.\",\"params\":{\"attestationId\":\"The attestation ID.\",\"dscCircuitProof\":\"The DSC circuit proof data.\",\"dscCircuitVerifierId\":\"The identifier for the DSC circuit verifier to use.\"}},\"registry(bytes32)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\"},\"returns\":{\"_0\":\"The registry address associated with the attestation ID.\"}},\"rootTimestamp(bytes32,uint256)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\",\"root\":\"The merkle root to query.\"},\"returns\":{\"_0\":\"The merkle root timestamp associated with the attestation ID and root.\"}},\"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))\":{\"details\":\"The configId is automatically generated from the config content using sha256(abi.encode(config))\",\"params\":{\"config\":\"The verification configuration\"},\"returns\":{\"configId\":\"The generated config ID\"}},\"updateDscVerifier(bytes32,uint256,address)\":{\"params\":{\"attestationId\":\"The attestation identifier.\",\"typeId\":\"The signature type identifier.\",\"verifierAddress\":\"The new DSC circuit verifier address.\"}},\"updateRegisterCircuitVerifier(bytes32,uint256,address)\":{\"params\":{\"attestationId\":\"The attestation identifier.\",\"typeId\":\"The signature type identifier.\",\"verifierAddress\":\"The new register circuit verifier address.\"}},\"updateRegistry(bytes32,address)\":{\"params\":{\"attestationId\":\"The attestation ID.\",\"registryAddress\":\"The new registry address.\"}},\"updateVcAndDiscloseCircuit(bytes32,address)\":{\"params\":{\"attestationId\":\"The attestation ID.\",\"vcAndDiscloseCircuitVerifierAddress\":\"The new VC and Disclose circuit verifier address.\"}},\"verificationConfigV2Exists(bytes32)\":{\"params\":{\"configId\":\"The configuration identifier\"},\"returns\":{\"exists\":\"Whether the config exists\"}},\"verify(bytes,bytes)\":{\"params\":{\"baseVerificationInput\":\"The base verification input data\",\"userContextData\":\"The user context data\"}}},\"title\":\"IIdentityVerificationHubV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])\":{\"notice\":\"Batch updates DSC circuit verifiers.\"},\"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])\":{\"notice\":\"Batch updates register circuit verifiers.\"},\"discloseVerifier(bytes32)\":{\"notice\":\"Returns the disclose verifier address for a given attestation ID.\"},\"dscCircuitVerifiers(bytes32,uint256)\":{\"notice\":\"Returns the DSC circuit verifier address for a given attestation ID and type ID.\"},\"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))\":{\"notice\":\"Generates a config ID from a verification config\"},\"getIdentityCommitmentMerkleRoot(bytes32)\":{\"notice\":\"Returns the identity commitment merkle root for a given attestation ID.\"},\"registerCircuitVerifiers(bytes32,uint256)\":{\"notice\":\"Returns the register circuit verifier address for a given attestation ID and type ID.\"},\"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))\":{\"notice\":\"Registers a commitment using a register circuit proof.\"},\"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))\":{\"notice\":\"Registers a DSC key commitment using a DSC circuit proof.\"},\"registry(bytes32)\":{\"notice\":\"Returns the registry address for a given attestation ID.\"},\"rootTimestamp(bytes32,uint256)\":{\"notice\":\"Returns the merkle root timestamp for a given attestation ID and root.\"},\"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))\":{\"notice\":\"Sets verification config in V2 storage (owner only)\"},\"updateDscVerifier(bytes32,uint256,address)\":{\"notice\":\"Updates the DSC circuit verifier for a specific signature type.\"},\"updateRegisterCircuitVerifier(bytes32,uint256,address)\":{\"notice\":\"Updates the register circuit verifier for a specific signature type.\"},\"updateRegistry(bytes32,address)\":{\"notice\":\"Updates the registry address.\"},\"updateVcAndDiscloseCircuit(bytes32,address)\":{\"notice\":\"Updates the VC and Disclose circuit verifier address.\"},\"verificationConfigV2Exists(bytes32)\":{\"notice\":\"Checks if a verification config exists\"},\"verify(bytes,bytes)\":{\"notice\":\"Main verification function with new structured input format\"}},\"notice\":\"Interface for the Identity Verification Hub V2 for verifying zero-knowledge proofs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/self/IIdentityVerificationHubV2.sol\":\"IIdentityVerificationHubV2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@Cyfrin/foundry-devops/=lib/foundry-devops/src/\",\":@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/\",\":@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/\",\":@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/\",\":@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/\",\":@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/\",\":@cryptoalgebra/integral-core/=lib/Algebra/src/core/\",\":@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/\",\":@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/\",\":@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@mento/core/=lib/mento-core/\",\":@mento/periphery/=lib/mento-router/\",\":@mento/std/=lib/mento-std/\",\":@openzeppelin-v5/=lib/openzeppelin-contracts-v5/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":@self/=node_modules/@selfxyz/contracts/contracts/\",\":@std/=lib/mento-router/lib/multicall/lib/forge-std/src/\",\":@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/\",\":@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/\",\":@synthetixio/governance/=lib/synthetix-v3/protocol/governance/\",\":@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/\",\":@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/v4-periphery/\",\":Algebra/=lib/Algebra/src/\",\":Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/\",\":celo-foundry/=lib/mento-deployment/lib/celo-foundry/\",\":celo/=lib/mento-core/node_modules/@celo/\",\":chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":contracts/=lib/mento-core/contracts/\",\":ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/\",\":foundry-devops/=lib/foundry-devops/\",\":governance-tests/=lib/governance-tests/\",\":hackathon-demo/=lib/hackathon-demo/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/\",\":mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/\",\":mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/\",\":mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/\",\":mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/\",\":mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/\",\":mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/\",\":mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/\",\":mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/\",\":mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/\",\":mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/\",\":mento-core/=lib/mento-core/contracts/\",\":mento-deployment/=lib/mento-deployment/\",\":mento-router/=lib/mento-router/\",\":mento-std/=lib/mento-std/src/\",\":merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/\",\":multicall/=lib/mento-router/lib/multicall/src/\",\":openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/\",\":openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":oracle-v2-playground/=lib/oracle-v2-playground/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":plugins-monorepo/=lib/plugins-monorepo/\",\":prb-math/=lib/mento-core/lib/prb-math/src/\",\":prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":prb/math/=lib/mento-core/lib/prb-math/src/\",\":redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/\",\":redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/\",\":safe-contracts/=lib/mento-core/lib/safe-contracts/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/\",\":synthetix-v3/=lib/synthetix-v3/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"]},\"sources\":{\"src/interfaces/self/IDscCircuitVerifier.sol\":{\"keccak256\":\"0x03842e7ac38db25853a3c3f69412f202f804e278f2eda9192a37d6ce61308930\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://67556e2f149f7669f7f4484c48c65c40363037fd034de353c55c65084f2db520\",\"dweb:/ipfs/QmUUU77fQsjas9ZvRWX2cC5LgfJV6a5kjsdf5UvhrjenCM\"]},\"src/interfaces/self/IIdentityVerificationHubV2.sol\":{\"keccak256\":\"0xfeac26d85232911566f9bb2637a236a6339624343d843c2fc002b79a6ac3e613\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e71b703b48294f39ab59f8f61216c7fe5f9a01fb1b94b1d87c5ad71ae59ec9d\",\"dweb:/ipfs/QmTUT1HqsrwL2xuHuDQ8oJXvbbsFJnLnYnbDn1UV9zj7Jw\"]},\"src/interfaces/self/IRegisterCircuitVerifier.sol\":{\"keccak256\":\"0xd33f5a7fb88c68e8ac93b9e7fa59345aaa6cc4d3c361382882f03cb540c5437b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1192f63516e2a79e2564775daf92032dfc5cc00a24bc29edda4900cb229b2734\",\"dweb:/ipfs/QmRWuozF1WghM6xBLmWWizrhRLLrf3DVVYYWRttCRJ48Tp\"]},\"src/libraries/self/SelfStructs.sol\":{\"keccak256\":\"0x17e5e9c62124f6abb451345833344d3e17ff635261a7818351be462d438b2c33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ebdbf9b69691947e57a3b9c070b76a7974c052f4b316aeca8917f24dc571dd21\",\"dweb:/ipfs/QmcV5W2XXtB9yzoJbjJHQtccYQKLfYX1t2JTxQmowZCYUP\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32[]","name":"attestationIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"typeIds","type":"uint256[]"},{"internalType":"address[]","name":"verifierAddresses","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"batchUpdateDscCircuitVerifiers"},{"inputs":[{"internalType":"bytes32[]","name":"attestationIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"typeIds","type":"uint256[]"},{"internalType":"address[]","name":"verifierAddresses","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"batchUpdateRegisterCircuitVerifiers"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"discloseVerifier","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"}],"stateMutability":"view","type":"function","name":"dscCircuitVerifiers","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct SelfStructs.VerificationConfigV2","name":"config","type":"tuple","components":[{"internalType":"bool","name":"olderThanEnabled","type":"bool"},{"internalType":"uint256","name":"olderThan","type":"uint256"},{"internalType":"bool","name":"forbiddenCountriesEnabled","type":"bool"},{"internalType":"uint256[4]","name":"forbiddenCountriesListPacked","type":"uint256[4]"},{"internalType":"bool[3]","name":"ofacEnabled","type":"bool[3]"}]}],"stateMutability":"pure","type":"function","name":"generateConfigId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getIdentityCommitmentMerkleRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"}],"stateMutability":"view","type":"function","name":"registerCircuitVerifiers","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"registerCircuitVerifierId","type":"uint256"},{"internalType":"struct IRegisterCircuitVerifier.RegisterCircuitProof","name":"registerCircuitProof","type":"tuple","components":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256[3]","name":"pubSignals","type":"uint256[3]"}]}],"stateMutability":"nonpayable","type":"function","name":"registerCommitment"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"dscCircuitVerifierId","type":"uint256"},{"internalType":"struct IDscCircuitVerifier.DscCircuitProof","name":"dscCircuitProof","type":"tuple","components":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256[2]","name":"pubSignals","type":"uint256[2]"}]}],"stateMutability":"nonpayable","type":"function","name":"registerDscKeyCommitment"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"registry","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"root","type":"uint256"}],"stateMutability":"view","type":"function","name":"rootTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct SelfStructs.VerificationConfigV2","name":"config","type":"tuple","components":[{"internalType":"bool","name":"olderThanEnabled","type":"bool"},{"internalType":"uint256","name":"olderThan","type":"uint256"},{"internalType":"bool","name":"forbiddenCountriesEnabled","type":"bool"},{"internalType":"uint256[4]","name":"forbiddenCountriesListPacked","type":"uint256[4]"},{"internalType":"bool[3]","name":"ofacEnabled","type":"bool[3]"}]}],"stateMutability":"nonpayable","type":"function","name":"setVerificationConfigV2","outputs":[{"internalType":"bytes32","name":"configId","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"},{"internalType":"address","name":"verifierAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateDscVerifier"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"},{"internalType":"address","name":"verifierAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateRegisterCircuitVerifier"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"address","name":"registryAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateRegistry"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"address","name":"vcAndDiscloseCircuitVerifierAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateVcAndDiscloseCircuit"},{"inputs":[{"internalType":"bytes32","name":"configId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"verificationConfigV2Exists","outputs":[{"internalType":"bool","name":"exists","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"baseVerificationInput","type":"bytes"},{"internalType":"bytes","name":"userContextData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"verify"}],"devdoc":{"kind":"dev","methods":{"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])":{"params":{"attestationIds":"An array of attestation identifiers.","typeIds":"An array of signature type identifiers.","verifierAddresses":"An array of new DSC circuit verifier addresses."}},"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])":{"params":{"attestationIds":"An array of attestation identifiers.","typeIds":"An array of signature type identifiers.","verifierAddresses":"An array of new register circuit verifier addresses."}},"discloseVerifier(bytes32)":{"params":{"attestationId":"The attestation ID to query."},"returns":{"_0":"The disclose verifier address associated with the attestation ID."}},"dscCircuitVerifiers(bytes32,uint256)":{"params":{"attestationId":"The attestation ID to query.","typeId":"The type ID to query."},"returns":{"_0":"The DSC circuit verifier address associated with the attestation ID and type ID."}},"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))":{"params":{"config":"The verification configuration"},"returns":{"_0":"The generated config ID (sha256 hash of encoded config)"}},"getIdentityCommitmentMerkleRoot(bytes32)":{"params":{"attestationId":"The attestation ID to query."},"returns":{"_0":"The identity commitment merkle root associated with the attestation ID."}},"registerCircuitVerifiers(bytes32,uint256)":{"params":{"attestationId":"The attestation ID to query.","typeId":"The type ID to query."},"returns":{"_0":"The register circuit verifier address associated with the attestation ID and type ID."}},"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))":{"details":"Verifies the register circuit proof and then calls the Identity Registry to register the commitment.","params":{"attestationId":"The attestation ID.","registerCircuitProof":"The register circuit proof data.","registerCircuitVerifierId":"The identifier for the register circuit verifier to use."}},"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))":{"details":"Verifies the DSC proof and then calls the Identity Registry to register the dsc key commitment.","params":{"attestationId":"The attestation ID.","dscCircuitProof":"The DSC circuit proof data.","dscCircuitVerifierId":"The identifier for the DSC circuit verifier to use."}},"registry(bytes32)":{"params":{"attestationId":"The attestation ID to query."},"returns":{"_0":"The registry address associated with the attestation ID."}},"rootTimestamp(bytes32,uint256)":{"params":{"attestationId":"The attestation ID to query.","root":"The merkle root to query."},"returns":{"_0":"The merkle root timestamp associated with the attestation ID and root."}},"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))":{"details":"The configId is automatically generated from the config content using sha256(abi.encode(config))","params":{"config":"The verification configuration"},"returns":{"configId":"The generated config ID"}},"updateDscVerifier(bytes32,uint256,address)":{"params":{"attestationId":"The attestation identifier.","typeId":"The signature type identifier.","verifierAddress":"The new DSC circuit verifier address."}},"updateRegisterCircuitVerifier(bytes32,uint256,address)":{"params":{"attestationId":"The attestation identifier.","typeId":"The signature type identifier.","verifierAddress":"The new register circuit verifier address."}},"updateRegistry(bytes32,address)":{"params":{"attestationId":"The attestation ID.","registryAddress":"The new registry address."}},"updateVcAndDiscloseCircuit(bytes32,address)":{"params":{"attestationId":"The attestation ID.","vcAndDiscloseCircuitVerifierAddress":"The new VC and Disclose circuit verifier address."}},"verificationConfigV2Exists(bytes32)":{"params":{"configId":"The configuration identifier"},"returns":{"exists":"Whether the config exists"}},"verify(bytes,bytes)":{"params":{"baseVerificationInput":"The base verification input data","userContextData":"The user context data"}}},"version":1},"userdoc":{"kind":"user","methods":{"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])":{"notice":"Batch updates DSC circuit verifiers."},"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])":{"notice":"Batch updates register circuit verifiers."},"discloseVerifier(bytes32)":{"notice":"Returns the disclose verifier address for a given attestation ID."},"dscCircuitVerifiers(bytes32,uint256)":{"notice":"Returns the DSC circuit verifier address for a given attestation ID and type ID."},"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))":{"notice":"Generates a config ID from a verification config"},"getIdentityCommitmentMerkleRoot(bytes32)":{"notice":"Returns the identity commitment merkle root for a given attestation ID."},"registerCircuitVerifiers(bytes32,uint256)":{"notice":"Returns the register circuit verifier address for a given attestation ID and type ID."},"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))":{"notice":"Registers a commitment using a register circuit proof."},"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))":{"notice":"Registers a DSC key commitment using a DSC circuit proof."},"registry(bytes32)":{"notice":"Returns the registry address for a given attestation ID."},"rootTimestamp(bytes32,uint256)":{"notice":"Returns the merkle root timestamp for a given attestation ID and root."},"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))":{"notice":"Sets verification config in V2 storage (owner only)"},"updateDscVerifier(bytes32,uint256,address)":{"notice":"Updates the DSC circuit verifier for a specific signature type."},"updateRegisterCircuitVerifier(bytes32,uint256,address)":{"notice":"Updates the register circuit verifier for a specific signature type."},"updateRegistry(bytes32,address)":{"notice":"Updates the registry address."},"updateVcAndDiscloseCircuit(bytes32,address)":{"notice":"Updates the VC and Disclose circuit verifier address."},"verificationConfigV2Exists(bytes32)":{"notice":"Checks if a verification config exists"},"verify(bytes,bytes)":{"notice":"Main verification function with new structured input format"}},"version":1}},"settings":{"remappings":["@Cyfrin/foundry-devops/=lib/foundry-devops/src/","@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/","@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/","@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/","@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/","@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/","@cryptoalgebra/integral-core/=lib/Algebra/src/core/","@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/","@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/","@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/","@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@mento/core/=lib/mento-core/","@mento/periphery/=lib/mento-router/","@mento/std/=lib/mento-std/","@openzeppelin-v5/=lib/openzeppelin-contracts-v5/","@openzeppelin/=lib/openzeppelin-contracts/","@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","@self/=node_modules/@selfxyz/contracts/contracts/","@std/=lib/mento-router/lib/multicall/lib/forge-std/src/","@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/","@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/","@synthetixio/governance/=lib/synthetix-v3/protocol/governance/","@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/","@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","@uniswap/v4-periphery/=lib/v4-periphery/","Algebra/=lib/Algebra/src/","Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/","celo-foundry/=lib/mento-deployment/lib/celo-foundry/","celo/=lib/mento-core/node_modules/@celo/","chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","contracts/=lib/mento-core/contracts/","ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/","forge-std/=lib/forge-std/src/","foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/","foundry-devops/=lib/foundry-devops/","governance-tests/=lib/governance-tests/","hackathon-demo/=lib/hackathon-demo/","halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/","mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/","mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/","mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/","mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/","mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/","mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/","mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/","mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/","mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/","mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/","mento-core/=lib/mento-core/contracts/","mento-deployment/=lib/mento-deployment/","mento-router/=lib/mento-router/","mento-std/=lib/mento-std/src/","merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/","multicall/=lib/mento-router/lib/multicall/src/","openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/","openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","oracle-v2-playground/=lib/oracle-v2-playground/","permit2/=lib/v4-periphery/lib/permit2/","plugins-monorepo/=lib/plugins-monorepo/","prb-math/=lib/mento-core/lib/prb-math/src/","prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","prb/math/=lib/mento-core/lib/prb-math/src/","redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/","redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/","safe-contracts/=lib/mento-core/lib/safe-contracts/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/","synthetix-v3/=lib/synthetix-v3/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/interfaces/self/IIdentityVerificationHubV2.sol":"IIdentityVerificationHubV2"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/interfaces/self/IDscCircuitVerifier.sol":{"keccak256":"0x03842e7ac38db25853a3c3f69412f202f804e278f2eda9192a37d6ce61308930","urls":["bzz-raw://67556e2f149f7669f7f4484c48c65c40363037fd034de353c55c65084f2db520","dweb:/ipfs/QmUUU77fQsjas9ZvRWX2cC5LgfJV6a5kjsdf5UvhrjenCM"],"license":"MIT"},"src/interfaces/self/IIdentityVerificationHubV2.sol":{"keccak256":"0xfeac26d85232911566f9bb2637a236a6339624343d843c2fc002b79a6ac3e613","urls":["bzz-raw://7e71b703b48294f39ab59f8f61216c7fe5f9a01fb1b94b1d87c5ad71ae59ec9d","dweb:/ipfs/QmTUT1HqsrwL2xuHuDQ8oJXvbbsFJnLnYnbDn1UV9zj7Jw"],"license":"MIT"},"src/interfaces/self/IRegisterCircuitVerifier.sol":{"keccak256":"0xd33f5a7fb88c68e8ac93b9e7fa59345aaa6cc4d3c361382882f03cb540c5437b","urls":["bzz-raw://1192f63516e2a79e2564775daf92032dfc5cc00a24bc29edda4900cb229b2734","dweb:/ipfs/QmRWuozF1WghM6xBLmWWizrhRLLrf3DVVYYWRttCRJ48Tp"],"license":"MIT"},"src/libraries/self/SelfStructs.sol":{"keccak256":"0x17e5e9c62124f6abb451345833344d3e17ff635261a7818351be462d438b2c33","urls":["bzz-raw://ebdbf9b69691947e57a3b9c070b76a7974c052f4b316aeca8917f24dc571dd21","dweb:/ipfs/QmcV5W2XXtB9yzoJbjJHQtccYQKLfYX1t2JTxQmowZCYUP"],"license":"MIT"}},"version":1},"id":214}