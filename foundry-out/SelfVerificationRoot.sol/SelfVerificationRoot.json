{"abi":[{"type":"function","name":"getConfigId","inputs":[{"name":"destinationChainId","type":"bytes32","internalType":"bytes32"},{"name":"userIdentifier","type":"bytes32","internalType":"bytes32"},{"name":"userDefinedData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"onVerificationSuccess","inputs":[{"name":"output","type":"bytes","internalType":"bytes"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"scope","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"verifySelfProof","inputs":[{"name":"proofPayload","type":"bytes","internalType":"bytes"},{"name":"userContextData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ScopeUpdated","inputs":[{"name":"newScope","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"InvalidDataFormat","inputs":[]},{"type":"error","name":"UnauthorizedCaller","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getConfigId(bytes32,bytes32,bytes)":"ada1b319","onVerificationSuccess(bytes,bytes)":"8d2d8d6a","scope()":"6e62d0a8","verifySelfProof(bytes,bytes)":"d161802b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDataFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newScope\",\"type\":\"uint256\"}],\"name\":\"ScopeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationChainId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"userDefinedData\",\"type\":\"bytes\"}],\"name\":\"getConfigId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onVerificationSuccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userContextData\",\"type\":\"bytes\"}],\"name\":\"verifySelfProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Self Team\",\"details\":\"Provides base functionality for verifying and disclosing identity credentials\",\"errors\":{\"InvalidDataFormat()\":[{\"details\":\"Triggered when the provided bytes data doesn't have the expected format\"}],\"UnauthorizedCaller()\":[{\"details\":\"Only the identity verification hub V2 contract can call onVerificationSuccess\"}]},\"events\":{\"ScopeUpdated(uint256)\":{\"params\":{\"newScope\":\"The new scope value that was set\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets up the immutable reference to the hub contract and initial scope\",\"params\":{\"identityVerificationHubV2Address\":\"The address of the Identity Verification Hub V2\",\"scopeValue\":\"The expected proof scope for user registration\"}},\"getConfigId(bytes32,bytes32,bytes)\":{\"details\":\"This function should be overridden by the implementing contract to provide custom configId logic\",\"params\":{\"destinationChainId\":\"The destination chain ID\",\"userDefinedData\":\"The user defined data\",\"userIdentifier\":\"The user identifier\"},\"returns\":{\"_0\":\"The configId\"}},\"onVerificationSuccess(bytes,bytes)\":{\"custom:flow\":\"This function decodes the output and calls the customizable verification hook\",\"custom:security\":\"Only the authorized hub contract can call this function\",\"details\":\"Only callable by the identity verification hub V2 contract for security\",\"params\":{\"output\":\"The verification output data containing disclosed identity information\",\"userData\":\"The user-defined data passed through the verification process\"}},\"scope()\":{\"details\":\"Public view function to access the current scope setting\",\"returns\":{\"_0\":\"The scope value that proofs must match\"}},\"verifySelfProof(bytes,bytes)\":{\"custom:data-format\":\"proofPayload = | 32 bytes attestationId | proofData |userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |\",\"details\":\"Parses relayer data format and validates against contract settings before calling hub V2\",\"params\":{\"proofPayload\":\"Packed data from relayer in format: | 32 bytes attestationId | proof data |\",\"userContextData\":\"User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |\"}}},\"stateVariables\":{\"CONTRACT_VERSION\":{\"details\":\"This version is included in the hub data for protocol compatibility\"},\"_identityVerificationHubV2\":{\"details\":\"Immutable reference used for bytes-based proof verification\"},\"_scope\":{\"details\":\"Used to validate that submitted proofs match the expected scope\"}},\"title\":\"SelfVerificationRoot\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidDataFormat()\":[{\"notice\":\"Error thrown when the data format is invalid\"}],\"UnauthorizedCaller()\":[{\"notice\":\"Error thrown when onVerificationSuccess is called by an unauthorized address\"}]},\"events\":{\"ScopeUpdated(uint256)\":{\"notice\":\"Emitted when the scope is updated\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the SelfVerificationRoot contract\"},\"getConfigId(bytes32,bytes32,bytes)\":{\"notice\":\"Generates a configId for the user\"},\"onVerificationSuccess(bytes,bytes)\":{\"notice\":\"Callback function called upon successful verification by the hub contract\"},\"scope()\":{\"notice\":\"Returns the current scope value\"},\"verifySelfProof(bytes,bytes)\":{\"notice\":\"Verifies a self-proof using the bytes-based interface\"}},\"notice\":\"Abstract base contract to be integrated with self's verification infrastructure\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/base/self/SelfVerificationRoot.sol\":\"SelfVerificationRoot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@Cyfrin/foundry-devops/=lib/foundry-devops/src/\",\":@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/\",\":@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/\",\":@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/\",\":@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/\",\":@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/\",\":@cryptoalgebra/integral-core/=lib/Algebra/src/core/\",\":@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/\",\":@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/\",\":@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@mento/core/=lib/mento-core/\",\":@mento/periphery/=lib/mento-router/\",\":@mento/std/=lib/mento-std/\",\":@openzeppelin-v5/=lib/openzeppelin-contracts-v5/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":@self/=node_modules/@selfxyz/contracts/contracts/\",\":@std/=lib/mento-router/lib/multicall/lib/forge-std/src/\",\":@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/\",\":@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/\",\":@synthetixio/governance/=lib/synthetix-v3/protocol/governance/\",\":@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/\",\":@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/v4-periphery/\",\":Algebra/=lib/Algebra/src/\",\":Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/\",\":celo-foundry/=lib/mento-deployment/lib/celo-foundry/\",\":celo/=lib/mento-core/node_modules/@celo/\",\":chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":contracts/=lib/mento-core/contracts/\",\":ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/\",\":foundry-devops/=lib/foundry-devops/\",\":governance-tests/=lib/governance-tests/\",\":hackathon-demo/=lib/hackathon-demo/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/\",\":mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/\",\":mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/\",\":mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/\",\":mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/\",\":mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/\",\":mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/\",\":mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/\",\":mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/\",\":mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/\",\":mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/\",\":mento-core/=lib/mento-core/contracts/\",\":mento-deployment/=lib/mento-deployment/\",\":mento-router/=lib/mento-router/\",\":mento-std/=lib/mento-std/src/\",\":merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/\",\":multicall/=lib/mento-router/lib/multicall/src/\",\":openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/\",\":openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":oracle-v2-playground/=lib/oracle-v2-playground/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":plugins-monorepo/=lib/plugins-monorepo/\",\":prb-math/=lib/mento-core/lib/prb-math/src/\",\":prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/\",\":prb/math/=lib/mento-core/lib/prb-math/src/\",\":redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/\",\":redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/\",\":safe-contracts/=lib/mento-core/lib/safe-contracts/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/\",\":synthetix-v3/=lib/synthetix-v3/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"]},\"sources\":{\"src/base/self/SelfVerificationRoot.sol\":{\"keccak256\":\"0xb4b0241bb81ed85a674839c7c1747d0625de9d2dbce1179e7e2fd97c08d73569\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09869dcc9731078d00dde1c049a926ba6a2a9b1993b688fc8fd626941aa02738\",\"dweb:/ipfs/QmdUDbwEu3mHpA4X6WkS24oxcBkC43zBsHoZp6vNVT6yyk\"]},\"src/constants/self/AttestationId.sol\":{\"keccak256\":\"0xdeb16b683f0edd912fa5eeb978268156decaf942ef754ff6f3362f6402434a3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e43ff284d2868799567a2bc78d97a2009ef9d4f0473d227847857092a0ee174f\",\"dweb:/ipfs/QmSLooZACaJpw9UUErtKjVZz4pPbPAbuT1TJaGPL1WSVjr\"]},\"src/constants/self/CircuitConstantsV2.sol\":{\"keccak256\":\"0xf0cf1967aee6e45dc4bb2c3b4e770f92f904f6d8a0bc247635d92f2858a9a76e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a6c8e50e010ac5bce1a11dbfba8c17d11e05dfdd5e0e2a400920a460b87f2\",\"dweb:/ipfs/QmW1zpSpYi1uiFPgUCWKuXKGb7681imCqaBUAuXDArmUr8\"]},\"src/interfaces/self/IDscCircuitVerifier.sol\":{\"keccak256\":\"0x03842e7ac38db25853a3c3f69412f202f804e278f2eda9192a37d6ce61308930\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://67556e2f149f7669f7f4484c48c65c40363037fd034de353c55c65084f2db520\",\"dweb:/ipfs/QmUUU77fQsjas9ZvRWX2cC5LgfJV6a5kjsdf5UvhrjenCM\"]},\"src/interfaces/self/IIdentityVerificationHubV2.sol\":{\"keccak256\":\"0xfeac26d85232911566f9bb2637a236a6339624343d843c2fc002b79a6ac3e613\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e71b703b48294f39ab59f8f61216c7fe5f9a01fb1b94b1d87c5ad71ae59ec9d\",\"dweb:/ipfs/QmTUT1HqsrwL2xuHuDQ8oJXvbbsFJnLnYnbDn1UV9zj7Jw\"]},\"src/interfaces/self/IRegisterCircuitVerifier.sol\":{\"keccak256\":\"0xd33f5a7fb88c68e8ac93b9e7fa59345aaa6cc4d3c361382882f03cb540c5437b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1192f63516e2a79e2564775daf92032dfc5cc00a24bc29edda4900cb229b2734\",\"dweb:/ipfs/QmRWuozF1WghM6xBLmWWizrhRLLrf3DVVYYWRttCRJ48Tp\"]},\"src/interfaces/self/ISelfVerificationRoot.sol\":{\"keccak256\":\"0x153a467485f4091f07234a15b7633e5df38dcb0df74f6c8887b88b3492d33a27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a88fd9feaabac3fc8169d35bb63276d3d45f634fb063e2d4b687e748269f72f\",\"dweb:/ipfs/QmUzEi3mt4S95eW3scczDaQZvNTDQjsYJX5ejH5fcDubte\"]},\"src/libraries/self/SelfStructs.sol\":{\"keccak256\":\"0x17e5e9c62124f6abb451345833344d3e17ff635261a7818351be462d438b2c33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ebdbf9b69691947e57a3b9c070b76a7974c052f4b316aeca8917f24dc571dd21\",\"dweb:/ipfs/QmcV5W2XXtB9yzoJbjJHQtccYQKLfYX1t2JTxQmowZCYUP\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidDataFormat"},{"inputs":[],"type":"error","name":"UnauthorizedCaller"},{"inputs":[{"internalType":"uint256","name":"newScope","type":"uint256","indexed":true}],"type":"event","name":"ScopeUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"destinationChainId","type":"bytes32"},{"internalType":"bytes32","name":"userIdentifier","type":"bytes32"},{"internalType":"bytes","name":"userDefinedData","type":"bytes"}],"stateMutability":"view","type":"function","name":"getConfigId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes","name":"output","type":"bytes"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onVerificationSuccess"},{"inputs":[],"stateMutability":"view","type":"function","name":"scope","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"proofPayload","type":"bytes"},{"internalType":"bytes","name":"userContextData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"verifySelfProof"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Sets up the immutable reference to the hub contract and initial scope","params":{"identityVerificationHubV2Address":"The address of the Identity Verification Hub V2","scopeValue":"The expected proof scope for user registration"}},"getConfigId(bytes32,bytes32,bytes)":{"details":"This function should be overridden by the implementing contract to provide custom configId logic","params":{"destinationChainId":"The destination chain ID","userDefinedData":"The user defined data","userIdentifier":"The user identifier"},"returns":{"_0":"The configId"}},"onVerificationSuccess(bytes,bytes)":{"custom:flow":"This function decodes the output and calls the customizable verification hook","custom:security":"Only the authorized hub contract can call this function","details":"Only callable by the identity verification hub V2 contract for security","params":{"output":"The verification output data containing disclosed identity information","userData":"The user-defined data passed through the verification process"}},"scope()":{"details":"Public view function to access the current scope setting","returns":{"_0":"The scope value that proofs must match"}},"verifySelfProof(bytes,bytes)":{"custom:data-format":"proofPayload = | 32 bytes attestationId | proofData |userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |","details":"Parses relayer data format and validates against contract settings before calling hub V2","params":{"proofPayload":"Packed data from relayer in format: | 32 bytes attestationId | proof data |","userContextData":"User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |"}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Initializes the SelfVerificationRoot contract"},"getConfigId(bytes32,bytes32,bytes)":{"notice":"Generates a configId for the user"},"onVerificationSuccess(bytes,bytes)":{"notice":"Callback function called upon successful verification by the hub contract"},"scope()":{"notice":"Returns the current scope value"},"verifySelfProof(bytes,bytes)":{"notice":"Verifies a self-proof using the bytes-based interface"}},"version":1}},"settings":{"remappings":["@Cyfrin/foundry-devops/=lib/foundry-devops/src/","@chainlink/contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/","@cryptoalgebra/abstract-plugin/=lib/plugins-monorepo/packages/abstract-plugin/","@cryptoalgebra/default-plugin/=lib/plugins-monorepo/packages/default-plugin/","@cryptoalgebra/dynamic-fee-plugin/=lib/plugins-monorepo/packages/dynamic-fee/","@cryptoalgebra/farming-proxy-plugin/=lib/plugins-monorepo/packages/farming-proxy/","@cryptoalgebra/integral-core/=lib/Algebra/src/core/","@cryptoalgebra/integral-periphery/=lib/Algebra/src/periphery/","@cryptoalgebra/volatility-oracle-plugin/=lib/plugins-monorepo/packages/volatility-oracle/","@ds/=lib/mento-router/lib/multicall/lib/ds-test/src/","@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@mento/core/=lib/mento-core/","@mento/periphery/=lib/mento-router/","@mento/std/=lib/mento-std/","@openzeppelin-v5/=lib/openzeppelin-contracts-v5/","@openzeppelin/=lib/openzeppelin-contracts/","@prb/test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","@self/=node_modules/@selfxyz/contracts/contracts/","@std/=lib/mento-router/lib/multicall/lib/forge-std/src/","@synthetixio/core-contracts/=lib/synthetix-v3/utils/core-contracts/","@synthetixio/core-modules/=lib/synthetix-v3/utils/core-modules/","@synthetixio/governance/=lib/synthetix-v3/protocol/governance/","@synthetixio/oracle-manager/=lib/synthetix-v3/protocol/oracle-manager/","@synthetixio/synthetix/=lib/synthetix-v3/protocol/synthetix/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","@uniswap/v4-periphery/=lib/v4-periphery/","Algebra/=lib/Algebra/src/","Roci-Smart-Contracts-v2/=lib/Roci-Smart-Contracts-v2/contracts/","celo-foundry/=lib/mento-deployment/lib/celo-foundry/","celo/=lib/mento-core/node_modules/@celo/","chainlink-brownie-contracts/=lib/mento-core/lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","contracts/=lib/mento-core/contracts/","ds-test/=lib/mento-router/lib/multicall/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std-next/=lib/mento-deployment/lib/forge-std-next/src/","forge-std/=lib/forge-std/src/","foundry-chainlink-toolkit/=lib/mento-core/lib/foundry-chainlink-toolkit/","foundry-devops/=lib/foundry-devops/","governance-tests/=lib/governance-tests/","hackathon-demo/=lib/hackathon-demo/","halmos-cheatcodes/=lib/openzeppelin-contracts-v5/lib/halmos-cheatcodes/src/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","mento-core-2.0.0/=lib/mento-deployment/lib/mento-core-2.0.0/contracts/","mento-core-2.1.0/=lib/mento-deployment/lib/mento-core-2.1.0/contracts/","mento-core-2.2.0/=lib/mento-deployment/lib/mento-core-2.2.0/contracts/","mento-core-2.3.1/=lib/mento-deployment/lib/mento-core-2.3.1/contracts/","mento-core-2.5.0/=lib/mento-deployment/lib/mento-core-2.5.0/contracts/","mento-core-2.6.0-oz/=lib/mento-deployment/lib/mento-core-2.6.0/lib/openzeppelin-contracts-next/","mento-core-2.6.0/=lib/mento-deployment/lib/mento-core-2.6.0/contracts/","mento-core-2.6.2/=lib/mento-deployment/lib/mento-core-2.6.2/contracts/","mento-core-2.6.3/=lib/mento-deployment/lib/mento-core-2.6.3/contracts/","mento-core-2.6.4/=lib/mento-deployment/lib/mento-core-2.6.4/contracts/","mento-core-2.6.5/=lib/mento-deployment/lib/mento-core-2.6.5/contracts/","mento-core/=lib/mento-core/contracts/","mento-deployment/=lib/mento-deployment/","mento-router/=lib/mento-router/","mento-std/=lib/mento-std/src/","merkle-distributor/=lib/mento-deployment/lib/merkle-distributor/contracts/","multicall/=lib/mento-router/lib/multicall/src/","openzeppelin-contracts-next/=lib/mento-core/lib/openzeppelin-contracts-next/","openzeppelin-contracts-upgradeable/=lib/mento-core/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v5/=lib/openzeppelin-contracts-v5/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-solidity/=lib/mento-core/lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","oracle-v2-playground/=lib/oracle-v2-playground/","permit2/=lib/v4-periphery/lib/permit2/","plugins-monorepo/=lib/plugins-monorepo/","prb-math/=lib/mento-core/lib/prb-math/src/","prb-test/=lib/mento-core/lib/prb-math/lib/prb-test/src/","prb/math/=lib/mento-core/lib/prb-math/src/","redstone-oracles-monorepo/=lib/oracle-v2-playground/lib/","redstone/=lib/oracle-v2-playground/lib/redstone-oracles-monorepo/packages/evm-connector/","safe-contracts/=lib/mento-core/lib/safe-contracts/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/","synthetix-v3/=lib/synthetix-v3/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/base/self/SelfVerificationRoot.sol":"SelfVerificationRoot"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/base/self/SelfVerificationRoot.sol":{"keccak256":"0xb4b0241bb81ed85a674839c7c1747d0625de9d2dbce1179e7e2fd97c08d73569","urls":["bzz-raw://09869dcc9731078d00dde1c049a926ba6a2a9b1993b688fc8fd626941aa02738","dweb:/ipfs/QmdUDbwEu3mHpA4X6WkS24oxcBkC43zBsHoZp6vNVT6yyk"],"license":"MIT"},"src/constants/self/AttestationId.sol":{"keccak256":"0xdeb16b683f0edd912fa5eeb978268156decaf942ef754ff6f3362f6402434a3f","urls":["bzz-raw://e43ff284d2868799567a2bc78d97a2009ef9d4f0473d227847857092a0ee174f","dweb:/ipfs/QmSLooZACaJpw9UUErtKjVZz4pPbPAbuT1TJaGPL1WSVjr"],"license":"MIT"},"src/constants/self/CircuitConstantsV2.sol":{"keccak256":"0xf0cf1967aee6e45dc4bb2c3b4e770f92f904f6d8a0bc247635d92f2858a9a76e","urls":["bzz-raw://244a6c8e50e010ac5bce1a11dbfba8c17d11e05dfdd5e0e2a400920a460b87f2","dweb:/ipfs/QmW1zpSpYi1uiFPgUCWKuXKGb7681imCqaBUAuXDArmUr8"],"license":"MIT"},"src/interfaces/self/IDscCircuitVerifier.sol":{"keccak256":"0x03842e7ac38db25853a3c3f69412f202f804e278f2eda9192a37d6ce61308930","urls":["bzz-raw://67556e2f149f7669f7f4484c48c65c40363037fd034de353c55c65084f2db520","dweb:/ipfs/QmUUU77fQsjas9ZvRWX2cC5LgfJV6a5kjsdf5UvhrjenCM"],"license":"MIT"},"src/interfaces/self/IIdentityVerificationHubV2.sol":{"keccak256":"0xfeac26d85232911566f9bb2637a236a6339624343d843c2fc002b79a6ac3e613","urls":["bzz-raw://7e71b703b48294f39ab59f8f61216c7fe5f9a01fb1b94b1d87c5ad71ae59ec9d","dweb:/ipfs/QmTUT1HqsrwL2xuHuDQ8oJXvbbsFJnLnYnbDn1UV9zj7Jw"],"license":"MIT"},"src/interfaces/self/IRegisterCircuitVerifier.sol":{"keccak256":"0xd33f5a7fb88c68e8ac93b9e7fa59345aaa6cc4d3c361382882f03cb540c5437b","urls":["bzz-raw://1192f63516e2a79e2564775daf92032dfc5cc00a24bc29edda4900cb229b2734","dweb:/ipfs/QmRWuozF1WghM6xBLmWWizrhRLLrf3DVVYYWRttCRJ48Tp"],"license":"MIT"},"src/interfaces/self/ISelfVerificationRoot.sol":{"keccak256":"0x153a467485f4091f07234a15b7633e5df38dcb0df74f6c8887b88b3492d33a27","urls":["bzz-raw://7a88fd9feaabac3fc8169d35bb63276d3d45f634fb063e2d4b687e748269f72f","dweb:/ipfs/QmUzEi3mt4S95eW3scczDaQZvNTDQjsYJX5ejH5fcDubte"],"license":"MIT"},"src/libraries/self/SelfStructs.sol":{"keccak256":"0x17e5e9c62124f6abb451345833344d3e17ff635261a7818351be462d438b2c33","urls":["bzz-raw://ebdbf9b69691947e57a3b9c070b76a7974c052f4b316aeca8917f24dc571dd21","dweb:/ipfs/QmcV5W2XXtB9yzoJbjJHQtccYQKLfYX1t2JTxQmowZCYUP"],"license":"MIT"}},"version":1},"id":197}